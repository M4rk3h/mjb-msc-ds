extrema_dates(Data$Tmax$Northern_Ireland)
extrema_dates(tmax_unl)
source('~/GitHub/mjb-msc-ds/data-mining-and-statistical-modelling/assessment-2/meeting-notes.R', echo=TRUE)
source('~/GitHub/mjb-msc-ds/data-mining-and-statistical-modelling/assessment-2/meeting-notes.R', echo=TRUE)
numyear2monthyear(time(data)[which.max(data)])
numyear2monthyear(time(data)[which.min(data)])
# try to use the 2 above functions
sapply(Data$Tmax, extrema_dates)
unlistedTMAX
# GETS MONTH
unlistedTMAX <- Data$Tmax %>% unlist()
myMm <- month.abb[(time(unlistedTMAX)[which.min(unlistedTMAX)] %% 1)*12+1]
myMm
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3 - Task 3
# EDA
plot(Data)
source('~/GitHub/mjb-msc-ds/data-mining-and-statistical-modelling/assessment-2/meeting-notes.R', echo=TRUE)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3 - Task 3
# EDA
plot(Data)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3 - Task 3
# EDA
library(ggplot2)
p <- ggplot(df, aes(x=date, y=sales)) +
geom_line()
p <- ggplot(df) +
geom_line()
plot(Data$Tmax$Northern_Ireland)
for (feature in features){
plot(Data$Tmax$feature)
}
for (feature in features){
#plot(Data$Tmax$feature)
print(feature)
}
#plot(Data$Tmax$feature)
print(feature)
for (district in districts){
#plot(Data$Tmax$feature)
print(feature)
}
for (district in districts){
#plot(Data$Tmax$feature)
print(district)
}
for (district in districts){
plot(Data$Tmax$district)
print(district)
}
for (district in districts){
#plot(Data$Tmax$district)
print(Data$Tmax$district)
}
for (district in districts){
#plot(Data$Tmax$district)
print(Data$Tmax$, district)
}
for (district in districts){
#plot(Data$Tmax$district)
print('Data$Tmax$', district)
}
for (district in districts){
#plot(Data$Tmax$district)
print(Data$Tmax$, district)
}
for (district in districts){
#plot(Data$Tmax$district)
print('Data$Tmax$', district)
}
# lets look at south SW England and S Wales.
tempMaxOne <- Data$Tmax$England_SW_and_S_Wales %>% plot(type = 'l',
ylab = 'Max Temps - SW England / S Wales')
# the plot has some seasonality - but difficult to notice a trend for total dataset.
tempMaxOneSlice <- Data$Tmax$England_SW_and_S_Wales[1:120] %>%
plot(type = 'l',
ylab = 'Max Temps - SW England / S Wales')
1644-120
tempMaxOneSlice2 <- Data$Tmax$England_SW_and_S_Wales[1524:1644] %>%
plot(type = 'l',
ylab = 'Max Temps - SW England / S Wales')
tempMaxOneSlice2 %>% ts.plot()
tempMaxOne %>% ts.plot()
mean(Data$Tmax$England_SW_and_S_Wales)
mean(Data$Tmax$England_SW_and_S_Wales[1:120]) # 12.99
mean(Data$Tmax$England_SW_and_S_Wales[1:120]) # 12.46
# last 10 years recorded
tempMaxOneSlice2 <- Data$Tmax$England_SW_and_S_Wales[1524:1644] %>%
plot(type = 'l',
ylab = 'Max Temps - SW England / S Wales')
mean(Data$Tmax$England_SW_and_S_Wales[1524:1644]) # 12.46
time.set <- 1884:2020
# linear line
linear.fit <- lm(Data$Tmax$England_SW_and_S_Wales ~ time.set)
Data$Tmax$England_SW_and_S_Wales
linear.fit <- lm(Data$Tmax$England_SW_and_S_Wales)
linear.fit <- lm(Data$Tmax$England_SW_and_S_Wales ~ time.set)
len(Data$Tmax$England_SW_and_S_Wales)
length(Data$Tmax$England_SW_and_S_Wales)
length(time.set)
time.set <- 1:length(Data$Tmax$England_SW_and_S_Wales)
length(Data$Tmax$England_SW_and_S_Wales)
length(time.set)
linear.fit <- lm(Data$Tmax$England_SW_and_S_Wales ~ time.set)
# rescale the time vector
time <- 1:length(tempD)
# rescale the time vector
time <- 1:length(Data$Tmax$England_SW_and_S_Wales)
time <- (time - min(time)) / (max(time) -1)
summary(linear.fit)
6.391e-04 * 12
nrow
# try again with rescaled
linear.fit <- lm(Data$Tmax$England_SW_and_S_Wales ~ time)
summary(linear.fit) #
print(1.0500 * 12)
ts.plot(Data$Tmax$England_SW_and_S_Wales, ylab = "Temperature")
linear.fit %>% fitted() %>% ts(start = 1884, frequency = 12) -> linear.fitted
lines(linear.fitted, col = "green", lwd = 2)
abline(mean(temp), 0, col = "blue", lwd = 2)
abline(mean(Data$Tmax$England_SW_and_S_Wales), 0, col = "blue", lwd = 2)
# lets look at the first 10 years
ts.plot(Data$Tmax$England_SW_and_S_Wales[1524:1644],
ylab = "Temperature")
lines(linear.fitted[1524:1644],
col = "green",
lwd = 2)
abline(mean(Data$Tmax$England_SW_and_S_Wales[1524:1644]),
0,
col = "blue",
lwd = 2)
View(Data)
Data[["Tmax"]][["England_SW_and_S_Wales"]]
colMax <- function(data) sapply(Data$Tmax, max, na.rm = TRUE)
colMax
colMax(Data$Tmax)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colMax(Data$Tmax)
summary(colMax(Data$Tmax))
colMax(Data$Tmax)
colMax <- function(data) sapply(data, which.max, na.rm = TRUE)
colMax(Data$Tmax)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3 - Task 3
# EDA
# find max value
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colMax(Data$Tmax)
print(colMax(Data$Tmax))
print(colMax(Data$Tmax))
print(colMax(Data$Tmean))
print(colMax(Data$Tmin))
print(colMax(Data$Tmax))
print(colMax(Data$Tmax))
print(colMax(Data$Tmax))
# East_Anglia has the highest value within the Tmax series
print(colMax(Data$Tmean))
# East_Anglia has the highest value within the Tmean series - obviously.
print(colMax(Data$Tmin))
# find lowest value
colMin <- function(data) sapply(data, min, na.rm = TRUE)
colMin(Data$Tmax)
# find lowest value
colMin <- function(data) sapply(data, min, na.rm = TRUE)
# find lowest value
colMin <- function(data) sapply(data, min, na.rm = TRUE)
colMin(Data$Tmax)
colMin(Data$Tmax)
# East_Anglia    has the lowest temp within the Tmax series
colMin(Data$Tmean)
# East_Anglia has the lowest temp within the Tmean series.
colMin(Data$Tmin)
colRange <- function(data) sapply(data, range, na.rm = TRUE)
colRange <- function(data) sapply(data, range, na.rm = TRUE)
colRange(Data$Tmax)
View(Data)
dTemp <- Data %>% unlist()
colMax(dTemp)
dTemp %>% colMax() %>% which.max()
highestMax <- function(data){
data %>%
colMax() %>%
which.max()
}
highestMax(dTemp)
highestMax(dTemp, colMax())
highestMax <- function(data, feature){
data %>%
feature %>%
which.max()
}
highestMax(dTemp, colMax())
highestMax(dTemp, colMax
highestMax(dTemp, colMax)
colMax(dTemp)
highestMax <- function(data, feature){
data %>%
feature() %>%
which.max()
}
highestMax(dTemp, colMax)
highestMax <- function(data, feature){
print('The highest temp within the full dataset is')
data %>%
feature() %>%
which.max()
}
highestMax(dTemp, colMax)
highestMax <- function(data, feature){
data %>%
feature() %>%
which.max()
print('The highest temp within the full dataset is')
}
highestMax(dTemp, colMax)
highestMax <- function(data, feature){
data %>%
feature() %>%
which.max()
print('The highest temp within the full dataset is', which.max)
}
highestMax(dTemp, colMax)
highestMax <- function(data, feature){
print('The highest temp within the full dataset is')
data %>%
feature() %>%
which.max()
}
highestMax(dTemp, colMax)
highestMax <- function(data, feature){
print('The highest temp within the full dataset is \n')
data %>%
feature() %>%
which.max()
}
highestMax(dTemp, colMax)
highestMax <- function(data, feature){
print(The highest temp within the full dataset is)
data %>%
feature() %>%
which.max()
}
highestMax(dTemp, colMax)
# lowest within dataset
lowestMin <- function(data, feature){
print('The highest temp within the full dataset is')
data %>%
feature() %>%
which.min()
}
# print
lowestMin(dTemp)
# print
lowestMin(dTemp, colMax())
highestMax(dTemp, colMean)
highestMax(dTemp, colMin)
# print
highestMax(dTemp, colMax)
highestMax(dTemp, colMean)
highestMax(dTemp, colMin)
highestMax(dTemp, colRange)
# print
highestMax(dTemp, colMax)
highestMax(dTemp, colMin)
highestMax(dTemp, colRange)
# print
highestMax(dTemp, colMax)
highestMax(dTemp, colMin)
# print
lowestMin(dTemp, colMax)
# print
lowestMin(dTemp, colMin)
colMin(Data$Tmax)
# East_Anglia    has the lowest temp within the Tmax series.
colMin(Data$Tmean)
# East_Anglia has the lowest temp within the Tmean series.
colMin(Data$Tmin)
# Scotland_E has the lowest temp within the Tmin series
colMin(dTemp)
# Scotland_E has the lowest temp within the Tmin series
dTemp %>% colMin() %>% which.min()
# remove the older lists
rm(Tmax.data, Tmean.data, Tmin.data)
# select the Tmax from Northern_Ireland
Data$Tmax$Northern_Ireland
# find max value
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colMax(Data$Tmax)
# find max value
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colMax(Data$Tmax)
# East_Anglia has the highest temp within the Tmax series.
colMax(Data$Tmean)
# East_Anglia has the highest temp within the Tmean series.
colMax(Data$Tmin)
# print
highestMax(Data$Tmax, colMax)
colMax(Data$Tmax)
colMax(Data$Tmax) %>% which.max()
colMax(Data$Tmax)
colWhichMax <- function(data) sapply(data, colWhichMax, na.rm = TRUE)
colWhichMax(Data$Tmax)
colWhichMax <- function(data) sapply(data, colWhichMax)
colWhichMax(Data$Tmax)
colWhichMax <- function(data) sapply(data, which.max)
colWhichMax(Data$Tmax)
# find max value
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colMax(Data$Tmax) %>% which.max()
# East_Anglia has the highest temp within the Tmax series.
colMax(Data$Tmean) %>% which.max()
# find lowest value
colMin <- function(data) sapply(data, min, na.rm = TRUE)
colMin(Data$Tmax)
colMax(dTemp)
colMax(dTemp) %>% which.max()
colMax(dTemp) %>% which.min()
# East_Anglia has the highest temp within the Tmean series.
colMax(Data$Tmin)
# East_Anglia has the highest temp within the Tmean series.
colMax(Data$Tmin)%>% which.max()
# find lowest value
colMin <- function(data) sapply(data, min, na.rm = TRUE)
colMin(Data$Tmax)
colMin(Data$Tmax) %>% which.max()
# find lowest value
colMin <- function(data) sapply(data, min, na.rm = TRUE)
colMin(Data$Tmax) %>% which.max()
colMin(Data$Tmax)
colMin(Data$Tmax) %>% which.min()
colMin(Data$Tmax)
# Midlands has the lowest temp within the Tmax series.
colMin(Data$Tmean) %>% which.min()
# East_Anglia has the lowest temp within the Tmean series.
colMin(Data$Tmin)
# East_Anglia has the lowest temp within the Tmean series.
colMin(Data$Tmin) %>% which.min()
colMin(Data$Tmax) %>% which.min()
# Midlands has the lowest temp within the Tmax series.
colMin(Data$Tmean) %>% which.min()
colMin(Data$Tmean)
colMin(Data$Tmax) %>% which.min()
# Midlands has the lowest temp within the Tmax series.
colMin(Data$Tmean) %>% which.min()
# Scotland_E has the lowest temp within the Tmean series.
colMin(Data$Tmin) %>% which.min()
colRange(Data$Tmax)
colRange(Data$Tmax) %>% which()
colRange(Data$Tmax)
Data$Tmax %>% range()
Data$Tmax %>% sapply(data, range())
Data$Tmax %>% sapply(data, range)
sapply(Data$Tmax, range)
lapply(Data$Tmax, range)
Data$Tmax %>% range() %>% which.max()
largest_range <- function(id){
rbind(id,
(max(data$length[which(data$id == id)]) -
min(data$length[which(data$id == id)])))
}
lapply(X = unique(Data$Tmax), FUN = largest_range)
largest_range <- function(id){
rbind(id,
(max(data$length[which(data$id == id)]) -
min(data$length[which(data$id == id)])))
}
lapply(X = unique(Data$Tmax), FUN = largest_range)
colRange <- function(data) sapply(data, range, na.rm = TRUE)
colRange(Data$Tmax)
colRange(Data$Tmax)
colRange(Data$Tmax) %>% min()
( colRange(Data$Tmax) %>% min() ) - (colRange(Data$Tmax) %>% max())
colMins <- tapply(Data$Tmax, min)
colMins <- tapply(Data$Tmax, min)
colMins <- lapply(Data$Tmax, min)
colMins <- sapply(Data$Tmax, min)
colMax <- sapply(Data$Tmax, max)
colMins
colMax
colMins <- sapply(Data$Tmax, min)
colMax <- sapply(Data$Tmax, max)
unique ( Data$Tmax)[which.max(colMax - colMins]
colMins <- sapply(Data$Tmax, min)
colMax <- sapply(Data$Tmax, max)
unique ( Data$Tmax)[which.max(colMax - colMins)]
colMins <- sapply(Data$Tmax, min)
colMax <- sapply(Data$Tmax, max)
colMins
colMax
unique(Data$Tmax)[which.max(colMax - colMins)]
myRanges <- unique(Data$Tmax)[which.max(colMax - colMins)]
View(myRanges)
myRanges[[1]]
colRange(Data$Tmax) %>% unique(Data$Tmax)[which.max(colMax - colMins)]
colRange(Data$Tmax) %>% unique()[which.max(colMax - colMins)]
Data$Tmax %>%
colRange() %>%
unique()[which.max(colMax - colMins)]
Data$Tmax %>%
unique()[which.max(colMax - colMins)] %>%
colRange()
colRange <- function(data) sapply(data, range, na.rm = TRUE)
colRange(Data$Tmax)
colMax(dTemp) %>% which.min()
# unlist the data to check whole dataset
dTemp <-
Data %>%
unlist()
colMax(dTemp) %>% which.min()
# find max value
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colMax(Data$Tmax) %>% which.max()
# East_Anglia has the highest temp within the Tmax series.
colMax(Data$Tmean) %>% which.max()
# East_Anglia has the highest temp within the Tmean series.
colMax(Data$Tmin) %>% which.max()
# find lowest value
colMin <- function(data) sapply(data, min, na.rm = TRUE)
colMin(Data$Tmax) %>% which.min()
# find lowest value
colMin <- function(data) sapply(data, min, na.rm = TRUE)
colMin(Data$Tmax) %>% which.min()
# Midlands has the lowest temp within the Tmax series.
colMin(Data$Tmean) %>% which.min()
# Scotland_E has the lowest temp within the Tmean series.
colMin(Data$Tmin) %>% which.min()
colRange <- function(data) sapply(data, range, na.rm = TRUE)
colRange(Data$Tmax)
# East_Anglia    has the lowest temp within the Tmax series.
colRange(Data$Tmean)
# East_Anglia    has the lowest temp within the Tmax series.
colRange(Data$Tmean)
# East_Anglia has the lowest temp within the Tmean series.
colRange(Data$Tmin)
# unlist the data to check whole dataset
dTemp <-
Data %>%
unlist()
colMax(dTemp) %>% which.min()
colMin(dTemp) %>% which.min()
colMax(dTemp) %>% which.max()
colMin(dTemp) %>% which.min()
colRange(dTemp) %>% which.min()
# highest temp
colMax(dTemp) %>% which.max()
# lowest temp
colMin(dTemp) %>% which.min()
colMin(Data$Tmax) %>% which.min()
colMin(Data$Tmax)
colMin(Data$Tmax) %>% which.min()
# lowest temp
colMin(dTemp) %>% which.min()
colMin(Data$Tmax)
colMin(Data$Tmax) %>% which.min()
colMax(dTemp) %>% which.max()
colMin(dTemp) %>% which.min()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1 - Task 1
library(magrittr)
library(tseries)
# set seed
set.seed(17076749)
# set address
address <- "https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/"
# set features
features <- c("Tmax", "Tmean", "Tmin")
# create a list of districts
districts <- c("Northern_Ireland",
"Scotland_N",
"Scotland_E",
"Scotland_W",
"England_E_and_NE",
"England_NW_and_N_Wales",
"Midlands",
"East_Anglia",
"England_SW_and_S_Wales",
"England_SE_and_Central_S")
# how many rows
nrow <- 2020-1884+1
# Time Series function
create.ts <- function(feature, district){ # pass 2 parameters
c(address, feature, "/date/", district, ".txt") %>%  # set the url with several features adding 2 text fields
paste(collapse = "") %>%  # collapse the set urls above with no space
read.table(skip = 5, header = TRUE, nrows = nrow) %>%  # read the table, skip 5 rows, add first col as headers and nrows is 2020-1884+1
subset(select = 2:13) %>%  # only select Jan - Dec
t() %>% # transpose matrix
as.vector() %>% # save it as a vector
ts(start = c(1884, 1),frequency = 12) # create a time-series object
}
# test the function
create.ts("Tmax", "Northern_Ireland")
# function to get all districts & features
readFeatures <- function(feature){
lapply(districts, create.ts, feature = feature) %>%
set_names(districts)
}
# get them all together.
Data <- lapply(features, readFeatures) %>% set_names(features)
# select the Tmax from Northern_Ireland
Data$Tmax$Northern_Ireland
colMax <- lapply(features, colMax)
# find max value
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colMax <- lapply(features, colMax)
colMax
View(colMax)
colMax[[1]]
colMax <- sapply(features, colMax)
colMax
