subset(data, select = 2:13)
# instead of slicing, we need to
data <- subset(data, select = 2:13)
View(data)
matrix(1:9, ncol = 3, nrow = 3)
as.vector(matrix(1:9, ncol = 3, nrow = 3))
138 * 12
View(data)
# transpose
data <- t()
# as vector
data <- as.vector(data)
# Convert the above into a function
library(magrittr)
# create a list of districts
districts <- list("Northern_Ireland.txt", "Scotland_N.txt",
"Scotland_E.txt", "Scotland_W.txt",
"England_E_and_NE.txt", "England_NW_and_N_Wales.txt",
"Midlands.txt", "East_Anglia.txt",
"England_SW_and_S_Wales.txt", "England_SE_and_Central_S.txt")
# Get one url
address <- "https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/Tmax/date/"
# create a list of districts
districts <- list("Northern_Ireland.txt", "Scotland_N.txt",
"Scotland_E.txt", "Scotland_W.txt",
"England_E_and_NE.txt", "England_NW_and_N_Wales.txt",
"Midlands.txt", "East_Anglia.txt",
"England_SW_and_S_Wales.txt", "England_SE_and_Central_S.txt")
features <- c("Tmax", "Tmean", "Tmin")
# create a list of districts
districts <- list("Northern_Ireland.txt", "Scotland_N.txt",
"Scotland_E.txt", "Scotland_W.txt",
"England_E_and_NE.txt", "England_NW_and_N_Wales.txt",
"Midlands.txt", "East_Anglia.txt",
"England_SW_and_S_Wales.txt", "England_SE_and_Central_S.txt")
source('~/.active-rstudio-document')
# this is bad
hecker <- for(i in 1:3){
for(j in 1:10){
create.ts(features[i], districts[j])
}
}
create.ts <- function(feature, district){
c(address, features, "/date/", district, ".txt") %>%
paste(address, district, sep = "") %>%
read.table(address, skip = 5, header = TRUE, nrows = nrow) %>%
subset(select = 2:13) %>%
t() %>%
as.vector()
}
# this is bad
hecker <- for(i in 1:3){
for(j in 1:10){
create.ts(features[i], districts[j])
}
}
# Notes with Filippo Meeting
# Get one url
address <-
"https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/Tmax/date/"
features <- c("Tmax", "Tmean", "Tmin")
# create a list of districts
districts <- list("Northern_Ireland.txt", "Scotland_N.txt",
"Scotland_E.txt", "Scotland_W.txt",
"England_E_and_NE.txt", "England_NW_and_N_Wales.txt",
"Midlands.txt", "East_Anglia.txt",
"England_SW_and_S_Wales.txt", "England_SE_and_Central_S.txt")
# how many rows
nrow <- 2020-1884+1
# read,table
data <- read.table(address, skip = 5, header = TRUE, nrows = nrow)
# instead of slicing, we need to
data <- subset(data, select = 2:13)
library(magrittr)
# TimeSeries function
create.ts <- function(feature, district){
c(address, features, "/date/", district, ".txt") %>%
paste(address, district, sep = "") %>%
read.table(address, skip = 5, header = TRUE, nrows = nrow) %>%
subset(select = 2:13) %>%
t() %>%
as.vector()
}
# this is bad
for(i in 1:3){
for(j in 1:10){
create.ts(features[i], districts[j])
}
}
# this is bad
for(i in 1:3){
for(j in 1:10){
create.ts(features[i], districts[j])
}
}
# this is bad
for(i in 1:3){
for(j in 1:10){
create.ts(features[i], districts[j])
}
}
# Time Series function
create.ts <- function(feature, district){
c(address, features, "/date/", district, ".txt") %>%
paste(address, district, sep = "") %>%
read.table(address, skip = 5, header = TRUE, nrows = nrow) %>%
subset(select = 2:13) %>%
t() %>%
as.vector()
}
# this is bad
for(i in 1:3){
for(j in 1:10){
create.ts(features[i], districts[j])
}
}
View(create.ts)
# paste(c(address, "Tmax", "/date/"), districts[1], collapse = "")
Tmax.data <-
lapply(districts, create.ts, feature = "Tmax") %>%
set_names(districts)
# Time Series function
create.ts <- function(feature, district){
c(address, features, "/date/", district, ".txt") %>%
paste(collapse = "") %>%
read.table(address, skip = 5, header = TRUE, nrows = nrow) %>%
subset(select = 2:13) %>%
t() %>%
as.vector()
}
# paste(c(address, "Tmax", "/date/"), districts[1], collapse = "")
Tmax.data <-
lapply(districts, create.ts, feature = "Tmax") %>%
set_names(districts)
read.table()
create.ts("Tmax", "Northern_Ireland")
# Notes with Filippo Meeting
# Get one url
address <- "https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/"
features <- c("Tmax", "Tmean", "Tmin")
# create a list of districts
districts <- list("Northern_Ireland.txt", "Scotland_N.txt",
"Scotland_E.txt", "Scotland_W.txt",
"England_E_and_NE.txt", "England_NW_and_N_Wales.txt",
"Midlands.txt", "East_Anglia.txt",
"England_SW_and_S_Wales.txt", "England_SE_and_Central_S.txt")
# Time Series function
create.ts <- function(feature, district){
c(address, features, "/date/", district, ".txt") %>%
paste(collapse = "") %>%
read.table(address, skip = 5, header = TRUE, nrows = nrow) %>%
subset(select = 2:13) %>%
t() %>%
as.vector()
}
create.ts("Tmax", "Northern_Ireland")
create.ts("Tmax", "Northern_Ireland")
address
paste(c(address, features, "/date/", district, ".txt"))
paste(c(address, features, "/date/", districts, ".txt"))
# Notes with Filippo Meeting
# Get one url
address <- "https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/"
# set address
address <- "https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/"
# set features
features <- c("Tmax", "Tmean", "Tmin")
# create a list of districts
districts <- list("Northern_Ireland",
"Scotland_N",
"Scotland_E",
"Scotland_W",
"England_E_and_NE",
"England_NW_and_N_Wales",
"Midlands",
"East_Anglia",
"England_SW_and_S_Wales",
"England_SE_and_Central_S")
paste(c(address, features, "/date/", districts, ".txt"))
# Time Series function
create.ts <- function(feature, district){
c(address, features, "/date/", districts, ".txt") %>%
paste(collapse = "") %>%
read.table(address, skip = 5, header = TRUE, nrows = nrow) %>%
subset(select = 2:13) %>%
t() %>%
as.vector()
}
create.ts("Tmax", "Northern_Ireland")
# Time Series function
create.ts <- function(feature, district){
c(address, feature, "/date/", district, ".txt") %>%
paste(collapse = "") %>%
read.table(address, skip = 5, header = TRUE, nrows = nrow) %>%
subset(select = 2:13) %>%
t() %>%
as.vector()
}
create.ts("Tmax", "Northern_Ireland")
# Time Series function
create.ts <- function(feature, district){
c(address, feature, "/date/", district, ".txt") %>%
paste(collapse = "") %>%
read.table(skip = 5, header = TRUE, nrows = nrow) %>%
subset(select = 2:13) %>%
t() %>%
as.vector() %>%
ts(start = c(1884, 1),frequency = 12)
}
create.ts("Tmax", "Northern_Ireland")
# try to do this with lapply to get 10 Tmax
Tmax.data <-
lapply(districts, create.ts, feature = "Tmax") %>%
set_names(districts)
View(Tmax.data)
library(data.table)
library(magrittr)
# set the seed
set.seed(17076749)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1 - Task 1
# set address
address <- "https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/"
# set features
features <- c("Tmax", "Tmean", "Tmin")
# create a list of districts
districts <- c("Northern_Ireland",
"Scotland_N",
"Scotland_E",
"Scotland_W",
"England_E_and_NE",
"England_NW_and_N_Wales",
"Midlands",
"East_Anglia",
"England_SW_and_S_Wales",
"England_SE_and_Central_S")
# how many rows
nrow <- 2020-1884+1
# Time Series function
create.ts <- function(feature, district){ # pass 2 parameters
c(address, feature, "/date/", district, ".txt") %>%  # set the url with several features adding 2 text fields
paste(collapse = "") %>%  # collapse the set urls above with no space
read.table(skip = 5, header = TRUE, nrows = nrow) %>%  # read the table, skip 5 rows, add first col as headers and nrows is 2020-1884+1
subset(select = 2:13) %>%  # only select Jan - Dec
t() %>% # transpose matrix
as.vector() %>% # save it as a vector
ts(start = c(1884, 1),frequency = 12) # create a time-series object
}
# test the function
create.ts("Tmax", "Northern_Ireland")
# TMAX
Tmax.data <-
lapply(districts, create.ts, feature = "Tmax") %>%
set_names(districts)
#TMEAN
Tmean.data <-
lapply(districts, create.ts, feature = "Tmean") %>%
set_names(districts)
#TMIN
Tmin.data <-
lapply(districts, create.ts, feature = "Tmin") %>%
set_names(districts)
# combine the list
Data <- list("Tmax" = Tmax.data,
"Tmean" = Tmean.data,
"Tmin" = Tmin.data
)
# select the Tmax from Northern_Ireland
Data[["Tmax"]][["Northern_Ireland"]]
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1 - Task 1
# set address
address <- "https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/"
# set features
features <- c("Tmax", "Tmean", "Tmin")
# create a list of districts
districts <- c("Northern_Ireland",
"Scotland_N",
"Scotland_E",
"Scotland_W",
"England_E_and_NE",
"England_NW_and_N_Wales",
"Midlands",
"East_Anglia",
"England_SW_and_S_Wales",
"England_SE_and_Central_S")
# how many rows
nrow <- 2020-1884+1
# Time Series function
create.ts <- function(feature, district){ # pass 2 parameters
c(address, feature, "/date/", district, ".txt") %>%  # set the url with several features adding 2 text fields
paste(collapse = "") %>%  # collapse the set urls above with no space
read.table(skip = 5, header = TRUE, nrows = nrow) %>%  # read the table, skip 5 rows, add first col as headers and nrows is 2020-1884+1
subset(select = 2:13) %>%  # only select Jan - Dec
t() %>% # transpose matrix
as.vector() %>% # save it as a vector
ts(start = c(1884, 1),frequency = 12) # create a time-series object
}
# test the function
create.ts("Tmax", "Northern_Ireland")
# TMAX
Tmax.data <-
lapply(districts, create.ts, feature = "Tmax") %>%
set_names(districts)
#TMEAN
Tmean.data <-
lapply(districts, create.ts, feature = "Tmean") %>%
set_names(districts)
#TMIN
Tmin.data <-
lapply(districts, create.ts, feature = "Tmin") %>%
set_names(districts)
# combine the list
Data <- list("Tmax" = Tmax.data,
"Tmean" = Tmean.data,
"Tmin" = Tmin.data
)
# select the Tmax from Northern_Ireland
Data[["Tmax"]][["Northern_Ireland"]]
source('~/GitHub/mjb-msc-ds/data-mining-and-statistical-modelling/assessment-2/meeting-notes.R', echo=TRUE)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1 - Task 1
library(magrittr)
# set address
address <- "https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/"
# set features
features <- c("Tmax", "Tmean", "Tmin")
# create a list of districts
districts <- c("Northern_Ireland",
"Scotland_N",
"Scotland_E",
"Scotland_W",
"England_E_and_NE",
"England_NW_and_N_Wales",
"Midlands",
"East_Anglia",
"England_SW_and_S_Wales",
"England_SE_and_Central_S")
# how many rows
nrow <- 2020-1884+1
# Time Series function
create.ts <- function(feature, district){ # pass 2 parameters
c(address, feature, "/date/", district, ".txt") %>%  # set the url with several features adding 2 text fields
paste(collapse = "") %>%  # collapse the set urls above with no space
read.table(skip = 5, header = TRUE, nrows = nrow) %>%  # read the table, skip 5 rows, add first col as headers and nrows is 2020-1884+1
subset(select = 2:13) %>%  # only select Jan - Dec
t() %>% # transpose matrix
as.vector() %>% # save it as a vector
ts(start = c(1884, 1),frequency = 12) # create a time-series object
}
# test the function
create.ts("Tmax", "Northern_Ireland")
# TMAX
Tmax.data <-
lapply(districts, create.ts, feature = "Tmax") %>%
set_names(districts)
#TMIN
Tmin.data <-
lapply(districts, create.ts, feature = "Tmin") %>%
set_names(districts)
#TMEAN
Tmean.data <-
lapply(districts, create.ts, feature = "Tmean") %>%
set_names(districts)
# combine the list
Data <- list("Tmax" = Tmax.data,
"Tmean" = Tmean.data,
"Tmin" = Tmin.data
)
# select the Tmax from Northern_Ireland
Data[["Tmax"]][["Northern_Ireland"]]
testDf <- Data[["Tmax"]]
testDf
remove(testDf)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
which.max(Data)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
Data %>% # get Data
unlist() %>% # unlist it
which.max()
Data %>% # get Data
unlist() %>% # unlist it
which.min()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
Data %>% # get Data
unlist() %>% # unlist it
which.max() %>% row.names()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
Data %>% # get Data
unlist() %>% # unlist it
row.names() %>%
which.max()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
Data %>% # get Data
unlist() %>% # unlist it
nrow() %>%
which.max()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
Data %>% # get Data
unlist() %>% # unlist it
which.max()
Data[["Tmax"]] %>% # get Data
unlist() %>% # unlist it
which.max()
View(Data)
Data[["Tmax"]][["East_Anglia"]]
Data[["Tmax"]] %>% # get Data
unlist() %>% # unlist it
as.vector() %>%
which.max()
Data[["Tmax"]] %>% # only select
unlist() %>% # unlist it
as.vector() %>%
select() %>%
which.max()
Data[["Tmax"]] %>% # only select
unlist() %>% # unlist it
as.vector() %>%
which.max()
Data[["Tmax"]] %>% # only select
unlist() %>% # unlist it
as.vector() %>%
which.max()
Data[["Tmax"]] %>% # only select
unlist()
Data[["Tmax"]] %>% # only select
unlist() %>% # unlist it
as.vector()
Data[["Tmax"]] %>% # only select
unlist() %>% # unlist it
as.vector() %>%
which.max()
Data[["Tmax"]][[12979]]
# get the data
Data[["Tmax"]] %>% # only select
unlist() %>% # unlist it
as.vector() %>%
which.max() -> myPos
# calculate index
subPos <- round((myPos/1644)*10)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
# find max temp
Data[['Tmax']] %>% which.max()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
# find max temp
Data[['Tmax']] %>%
as.vector() %>%
which.max()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
# find max temp
Data[['Tmax']] %>%
unlist()
Data[["Tmax"]] %>% # only select
unlist() %>% # unlist it
as.vector() %>%
which.max()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
# find max temp
Data[["Tmax"]] %>% # only select
unlist() %>% # unlist it
as.vector() %>%
which.max()
library(tseries)
View(Data)
Data[["Tmax"]]
sum(Data[["Tmax"]])
# calculate index
subPos <- round((myPos/16440)*10)
# get max temp
maxTem <- sublist[[subPos]][[which.max((sublist[[subPos]]))]]
sublist %>% # only select
unlist() %>% # unlist it
as.vector() %>%
which.max() -> myPos
Data %>% # only select
unlist() %>% # unlist it
as.vector() %>%
which.max() -> myPos
# calculate index
subPos <- round((myPos/16440)*10)
Data %>% # only select
unlist() %>% # unlist it
as.vector() %>%
which.max() -> myPos
# calculate index
subPos <- round((myPos/16440)*10)
# get max temp
maxTem <- Data[[subPos]][[which.max((Data[[subPos]]))]]
# get max temp
maxTemp <- Data[[subPos]][[which.max((Data[[subPos]]))]]
# get max year
maxYear <- floor(time(Data[[subPos]]))[which.max(Data[[subPos]])
}
# change the data into
Data[["Tmax"]] %>% # only select
unlist() %>% # unlist it
as.vector() %>%
which.max()
Data[["Tmax"]][]
Data %>% # get Data
unlist() %>% # unlist it
which.min()
