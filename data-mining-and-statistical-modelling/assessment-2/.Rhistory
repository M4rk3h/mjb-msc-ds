# create 2
slice.har2 <- lm(sliced.window.notrend ~ . -1 ,
data.frame(SIN = SIN[,1:2], COS = COS[,1]))
# check summary
summary(slice.har2)
slice.final <- lm(slicedWindow ~ .,
data.frame(TIME = poly(time, degree = 1, raw = T),
SIN = SIN[,1:2],
COS = COS[,1]))
# check summary
summary(slice.final)
plot(slicedWindow,
main = 'AVG TEMP NW England & N Wales',
xlab = 'Year',
ylab = 'AVG TEMP',
type = 'l')
# sliced window on 1 dataset
slicedWindow <-
Data$Tmax$England_NW_and_N_Wales %>%
window(start = c(1884,12),
end = c(2019,12),
frequency = 12,
extend = FALSE)
#
slicedWindow
# create time vector
time <- slicedWindow %>% time() %>% as.vector()
time
# re-scale time from 0 - 1
time <- (time - min(time))/(max(time) - 1)
# generate a plot
plot(time,
slicedWindow,
type = 'l')
# re-scale time from 0 - 1
time <- (time - min(time))/(max(time) - 1)
time
time <- slicedWindow %>% time() %>% as.vector()
time
# create time vector
time <- slicedWindow %>% time()
time
time <- slicedWindow %>% time()
time
slicedWindow %>% time()
# create time vector
time <- slicedWindow %>% time() %>% as.vector()
time
# create time vector
time <- 1:length(slicedWindow)
time
# re-scale time from 0 - 1
time <- (time - min(time))/(max(time) - 1)
# generate a plot
plot(time,
slicedWindow,
type = 'l')
# create time vector
time <- 1:length(slicedWindow)
# generate a plot
plot(time,
slicedWindow,
type = 'l')
# generate a plot
ts.plot(time,
slicedWindow,
type = 'l')
# generate a plot
plot(time,
slicedWindow,
type = 'l')
# create time vector
time <- 1:length(slicedWindow)
time <- (time - min(time))/(max(time) - 1)
# generate a plot
plot(time,
slicedWindow,
type = 'l')
slicedWindow
# sliced window on 1 dataset
slicedWindow <-
Data$Tmax$England_NW_and_N_Wales %>%
window(start = c(1884,12),
end = c(2019,12),
frequency = 12,
extend = FALSE)
#
slicedWindow
# create time vector
time <- 1:length(slicedWindow)
time <- (time - min(time))/(max(time) - 1)
# generate a plot
plot(time,
slicedWindow,
type = 'l')
slicedWindow %>% ts(start = c(1884,12),
end = c(2019,12),
frequency = 12) -> slicedWindow
slicedWindow
# create time vector
time <- 1:length(slicedWindow)
time <- (time - min(time))/(max(time) - 1)
# generate a plot
plot(time,
slicedWindow,
type = 'l')
#
slicedWindow
# sliced window on 1 dataset
slicedWindow <-
Data$Tmax$England_NW_and_N_Wales %>%
window(start = c(1884,12),
end = c(2019,12),
frequency = 12,
extend = FALSE)
# create time vector
time <- 1:length(slicedWindow)
time <- (time - min(time))/(max(time) - 1)
# create time vector
time <- 1:length(slicedWindow)
time <- (time - min(time))/(max(time) - 1)
# generate a plot
plot(time,
slicedWindow,
type = 'l')
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# linear trend
linear <-
lm(slicedWindow ~ poly(time, degree = 1, raw = T))
# quadratic trend
quadratic <-
lm(slicedWindow ~ poly(time, degree = 2, raw = T))
# add linear line
lines(time,
linear.fit %>% fitted(),
col = 'green',
lwd = 3)
# add mean line
abline(mean(slicedWindow), 0, col='blue', lwd=3)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# quadratic trend
# square the time
time2 <- time^2
# create quadratic fit model
quadratic.fit <-
lm(slicedWindow ~ time + time2)
# check summary
summary(quadratic.fit)
# add quadratic line
lines(time,
quadratic.fit %>% fitted(),
col = 'purple',
lwd = 3)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# cube time
time3 <- time^3
# create cubic fit model
cubic.fit <- lm(slicedWindow ~ time + time2 + time3)
# check summary
summary(cubic.fit)
# add cubic line
lines(time,
cubic.fit %>% fitted(),
col = 'yellow',
lwd = 3)
AIC(linear.fit)
AIC(quadratic.fit)
AIC(cubic.fit)
# start with 1 dataset and remove the trend
sliced.window.notrend <-
(slicedWindow - fitted(linear.fit))
# get seasonal means
tapply(sliced.window.notrend, cycle(sliced.window.notrend), mean)
# create months variable as factor
months <- sliced.window.notrend %>% cycle() %>% as.factor()
# seasonal means
sliced.seas <- lm(sliced.window.notrend ~ months - 1)
# check summary for seasonal means coefficients
summary(sliced.seas)
# evaluate harmonic seasonality
# create an empty matrix
SIN <- COS <-  matrix(nrow = length(time), ncol = 6)# 6 = freq/2
for(i in 1:6){
SIN[,i] <- sin(2*pi*i*time)
COS[,i] <- cos(2*pi*i*time)
}
# model all season harmonic
# model notrend against all values with -1
slice.har1 <- lm(sliced.window.notrend ~ . -1 ,
data.frame(SIN = SIN[,1], COS = COS[,1]))
# check summary
summary(slice.har1)
# create 2
slice.har2 <- lm(sliced.window.notrend ~ . -1 ,
data.frame(SIN = SIN[,1:2], COS = COS[,1]))
# check summary
summary(slice.har2)
slice.final <- lm(slicedWindow ~ .,
data.frame(TIME = poly(time, degree = 1, raw = T),
SIN = SIN[,1:2],
COS = COS[,1]))
# check summary
summary(slice.final)
plot(slicedWindow,
main = 'AVG TEMP NW England & N Wales',
xlab = 'Year',
ylab = 'AVG TEMP',
type = 'l')
lines(time,
fitted(slice.har2),
lwd = 3,
type = 'l',
col = 'blue')
# generate a plot
plot(slicedWindow,
type = 'l')
plot(slicedWindow,
main = 'avg temp - NW England & N Wales',
xlab = 'year',
ylab = 'avg temp',
type = 'l')
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# linear trend
linear <-
lm(slicedWindow ~ poly(time, degree = 1, raw = T))
# quadratic trend
quadratic <-
lm(slicedWindow ~ poly(time, degree = 2, raw = T))
# cubic trend
cubic <-
lm(slicedWindow ~ poly(time, degree = 3, raw = T))
# check summary
summary(linear)
summary(quadratic)
summary(cubic)
# generate a plot
plot(slicedWindow,
main = 'Avg Temp - NW England & N Wales',
xlab = 'year',
ylab = 'avg temp',
type = 'l')
# add linear line
lines(time,
linear.fit %>% fitted(),
col = 'green',
lwd = 3)
# add mean line
abline(mean(slicedWindow), 0, col='blue', lwd=3)
# add linear line
lines(time,
linear.fit %>% fitted(),
col = 'green',
lwd = 3)
# add mean line
abline(mean(slicedWindow), 0, col='blue', lwd=3)
# generate a plot
ts.plot(slicedWindow,
main = 'Avg Temp - NW England & N Wales',
xlab = 'year',
ylab = 'avg temp',
type = 'l')
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# linear trend
linear <-
lm(slicedWindow ~ poly(time, degree = 1, raw = T))
# quadratic trend
quadratic <-
lm(slicedWindow ~ poly(time, degree = 2, raw = T))
# cubic trend
cubic <-
lm(slicedWindow ~ poly(time, degree = 3, raw = T))
# check summary
summary(linear)
summary(quadratic)
summary(cubic)
# add linear line
lines(time,
linear.fit %>% fitted(),
col = 'green',
lwd = 3)
# add linear line
lines(time,
linear %>% fitted(),
col = 'green',
lwd = 3)
ts.plot(slicedWindow, ylab = "Temperature")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# linear trend
linear <-
lm(slicedWindow ~ poly(time, degree = 1, raw = T))
linear
# create linear model
linear %>%
fitted() %>%
ts(start = c(1884,12), end = c(2019,12),
frequency = 12) -> linear
linear
# create linear fitted
linear.fitted %>% fitted() %>%
ts(start = c(1884,12), end = c(2019,12),
frequency = 12) -> linear.fitted
# add linear fitted lines
lines(linear.fitted, col = "green", lwd = 2)
# create linear fitted
linear.fitted %>% fitted() %>%
ts(start = c(1884,12), end = c(2019,12),
frequency = 12) -> linear.fitted
# add linear fitted lines
lines(linear.fitted, col = "green", lwd = 2)
# create linear fitted
linear %>% fitted() %>%
ts(start = c(1884,12), end = c(2019,12),
frequency = 12) -> linear.fitted
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# linear trend
linear <- lm(slicedWindow ~ time)
# create ts plot with the data
ts.plot(slicedWindow, ylab = "Temperature")
# create linear fitted
linear %>% fitted() %>% ts(start = c(1884,12), end = c(2019,12), frequency = 12) -> linear
# add linear fitted lines
lines(linear, col = "green", lwd = 2)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# linear trend
linear.fit <- lm(slicedWindow ~ time)
# create ts plot with the data
ts.plot(slicedWindow, ylab = "Temperature")
# create linear fitted
linear.fit %>% fitted() %>% ts(start = c(1884,12), end = c(2019,12), frequency = 12) -> linear.fitted
# add linear fitted lines
lines(linear.fitted, col = "green", lwd = 2)
abline(mean(slicedWindow), 0, col = "blue", lwd = 2)
# create quadratic fit model
quadratic.fit <- lm(slicedWindow ~ time + time2)
# create linear fitted
quadratic.fit %>% fitted() %>% ts(start = c(1884,12), end = c(2019,12), frequency = 12) -> quadratic.fitted
# add linear fitted lines
lines(quadratic.fitted, col = "green", lwd = 2)
# check summary
summary(linear.fit)
2019-10
1621-120
# check last 10 years
ts.plot(slicedWindow[1501:1621], ylab = "Temperature")
# check last 10 years
ts.plot(slicedWindow[2009:2019], ylab = "Temperature")
# check last 10 years
ts.plot(slicedWindow[1501:1621], ylab = "Temperature")
1656-1536
lines(linear.fitted[1501:1621], col = "green", lwd = 2)
abline(mean(temp[1501:1621]), 0, col = "blue", lwd = 2)
# check last 10 years
ts.plot(slicedWindow[1501:1621], ylab = "Temperature")
lines(linear.fitted[1501:1621], col = "green", lwd = 2)
abline(mean(temp[1501:1621]), 0, col = "blue", lwd = 2)
abline(mean(slicedWindow[1501:1621]), 0, col = "blue", lwd = 2)
# check last 10 years
ts.plot(slicedWindow[1501:1621], ylab = "Temperature")
lines(linear.fitted[1501:1621], col = "green", lwd = 2)
abline(mean(slicedWindow[1501:1621]), 0, col = "blue", lwd = 2)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1 - Task 1
library(magrittr)
library(tseries)
# set seed
set.seed(17076749)
# set address
address <- "https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/"
# set features
features <- c("Tmax", "Tmean", "Tmin")
# create a list of districts
districts <- c("Northern_Ireland",
"Scotland_N",
"Scotland_E",
"Scotland_W",
"England_E_and_NE",
"England_NW_and_N_Wales",
"Midlands",
"East_Anglia",
"England_SW_and_S_Wales",
"England_SE_and_Central_S")
# how many rows
nrow <- 2020-1884+1
# Time Series function
create.ts <- function(feature, district){ # pass 2 parameters
c(address, feature, "/date/", district, ".txt") %>%  # set the url with several features adding 2 text fields
paste(collapse = "") %>%  # collapse the set urls above with no space
read.table(skip = 5, header = TRUE, nrows = nrow) %>%  # read the table, skip 5 rows, add first col as headers and nrows is 2020-1884+1
subset(select = 2:13) %>%  # only select Jan - Dec
t() %>% # transpose matrix
as.vector() %>% # save it as a vector
ts(start = c(1884, 1),frequency = 12) # create a time-series object
}
# test the function
create.ts("Tmax", "Northern_Ireland")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1 - Task 1
library(magrittr)
library(tseries)
# set seed
set.seed(17076749)
# set address
address <- "https://www.metoffice.gov.uk/pub/data/weather/uk/climate/datasets/"
# set features
features <- c("Tmax", "Tmean", "Tmin")
# create a list of districts
districts <- c("Northern_Ireland",
"Scotland_N",
"Scotland_E",
"Scotland_W",
"England_E_and_NE",
"England_NW_and_N_Wales",
"Midlands",
"East_Anglia",
"England_SW_and_S_Wales",
"England_SE_and_Central_S")
# how many rows
nrow <- 2020-1884+1
# Time Series function
create.ts <- function(feature, district){ # pass 2 parameters
c(address, feature, "/date/", district, ".txt") %>%  # set the url with several features adding 2 text fields
paste(collapse = "") %>%  # collapse the set urls above with no space
read.table(skip = 5, header = TRUE, nrows = nrow) %>%  # read the table, skip 5 rows, add first col as headers and nrows is 2020-1884+1
subset(select = 2:13) %>%  # only select Jan - Dec
t() %>% # transpose matrix
as.vector() %>% # save it as a vector
ts(start = c(1884, 1),frequency = 12) # create a time-series object
}
# test the function
create.ts("Tmax", "Northern_Ireland")
# function to get all districts & features
readFeatures <- function(feature){
lapply(districts, create.ts, feature = feature) %>%
set_names(districts)
}
# get them all together.
Data <- lapply(features, readFeatures) %>% set_names(features)
# select the Tmax from Northern_Ireland
Data$Tmax$Northern_Ireland
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2 - Task 2
# find max temp
# find the max value's index
maxIndex <- Data$Tmax %>%
unlist() %>%
as.vector() %>%
which.max()
# find sub position
subIndex <- round((maxIndex/16440)*10) # 8 - This could be district
# find max value
# maxVal <- DTmUn %>% which.max()
# find year
# maxYear <- floor(time(DTmUn))[which.max(DTmUn)]
# month
# maxMonth <- month.abb[(time(Data$Tmax)[which.max(Data$Tmax)] %>% 1)*12+1]
# calculate regions
# maxRegions <- names(Data$Tmax)
# GETS MONTH
unlistedTMAX <- Data$Tmax %>% unlist()
myMm <- month.abb[(time(unlistedTMAX)[which.min(unlistedTMAX)] %% 1)*12+1]
# plot(Data$Tmax$Northern_Ireland, type = 'l')
# get max temp of Tmax
sapply(Data$Tmax, which.max)
# data_min_value_time <- time(Data)[which.min(Data)]
# unlist tMAX
tmax_unl <- Data$Tmax %>%
unlist() %>%
as.vector()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3 - Task 3
# EDA
# find max value
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colMax(Data$Tmax) %>% which.max()
# East_Anglia has the highest temp within the Tmax series.
colMax(Data$Tmean) %>% which.max()
# East_Anglia has the highest temp within the Tmean series.
colMax(Data$Tmin) %>% which.max()
# England_SE_and_Central_S has the highest temp within Tmin.
# find lowest value
colMin <- function(data) sapply(data, min, na.rm = TRUE)
colMin(Data$Tmax) %>% which.min()
# Midlands has the lowest temp within the Tmax series.
colMin(Data$Tmean) %>% which.min()
# Scotland_E has the lowest temp within the Tmean series.
colMin(Data$Tmin) %>% which.min()
# Scotland_E has the lowest temp within the Tmin series
colRange <- function(data) sapply(data, range, na.rm = TRUE)
colRange(Data$Tmax)
colRange(Data$Tmean)
colRange(Data$Tmin)
# The above can also be done on the full dataset.
maxTemps <- sapply(Data, colMax)
# print
maxTemps
minTemps <- sapply(Data, colMin)
# print
minTemps
totRange <- sapply(Data, colRange)
# print
totRange
colAvg <- function(data) sapply(data, mean)
sapply(Data, colAvg)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 4 - Task 4 – Trend and Seasonality
# 4.0 - Subset
# For each district, consider the 3 time series: max, mean, min.
# Subset each of the 30 time series until December 2019.
data <- data.frame(title1 = Data$Tmax$Northern_Ireland,
title2 = Data$Tmax$Scotland_N)
data
View(data)
